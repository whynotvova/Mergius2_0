from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_IDS
from keyboards.keyboards import get_admin_panel, get_users_list, get_user_actions, get_tariff_keyboard, get_unanswered_tickets_keyboard
from aiogram.filters import Command
import logging
from utils import check_site

logger = logging.getLogger(__name__)

router = Router()

class Broadcast(StatesGroup):
    message = State()

class ReplyTicket(StatesGroup):
    message = State()
    ticket_id = State()
    user_id = State()

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    user_id = message.from_user.id
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    if user_id not in ADMIN_IDS:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_panel())
    logger.debug(f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@router.callback_query(F.data == "admin_panel")
async def show_admin_panel(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_panel())
    await callback.answer()

@router.callback_query(F.data == "admin_stats")
async def show_stats(callback: CallbackQuery, db):
    if callback.from_user.id not in ADMIN_IDS:
        return
    stats = await db.get_stats()
    if stats:
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {stats['bot_users']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ: {stats['site_users']}\n"
            f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫: {stats['open_tickets']}"
        )
    else:
        text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    await callback.message.edit_text(text, reply_markup=get_admin_panel())
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery, db):
    if callback.from_user.id not in ADMIN_IDS:
        return
    users = await db.get_site_users()
    if not users:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_panel())
    else:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∞–π—Ç–∞:", reply_markup=get_users_list(users))
    await callback.answer()

@router.callback_query(F.data.startswith("user_"))
async def show_user_info(callback: CallbackQuery, db):
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split("_")[1])
    user = await db.get_site_user(user_id)
    if user:
        text = (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['username'] or 'No Username'}\n"
            f"ID: {user['user_id']}\n"
            f"–¢–∞—Ä–∏—Ñ: {user['account_type_id']}"
        )
        await callback.message.edit_text(text, reply_markup=get_user_actions(user_id))
    else:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–π—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_panel())
    await callback.answer()

@router.callback_query(F.data.startswith("change_tariff_"))
async def change_tariff(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return
    user_id = int(callback.data.split("_")[2])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=get_tariff_keyboard(user_id))
    await callback.answer()

@router.callback_query(F.data.startswith("set_tariff_"))
async def set_tariff(callback: CallbackQuery, db):
    if callback.from_user.id not in ADMIN_IDS:
        return
    parts = callback.data.split("_")
    user_id = int(parts[2])
    tariff = parts[3]
    await db.update_site_tariff(user_id, tariff)
    await callback.message.edit_text(f"–¢–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {tariff}.", reply_markup=get_user_actions(user_id))
    await callback.answer()

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.message)
    await callback.answer()

@router.message(Broadcast.message)
async def send_broadcast(message: Message, state: FSMContext, db):
    if message.from_user.id not in ADMIN_IDS:
        return
    users = await db.get_users()
    successful = 0
    failed = 0
    deleted = 0
    for user in users:
        user_id = user['user_id']
        try:
            await message.bot.send_message(user_id, message.text)
            successful += 1
            logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            failed += 1
            await db.delete_user(user_id)
            deleted += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed}\n"
        f"–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {deleted}",
        reply_markup=get_admin_panel()
    )
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={successful}, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ={failed}, —É–¥–∞–ª–µ–Ω–æ={deleted}")
    await state.clear()

@router.callback_query(F.data == "admin_tickets")
async def show_unanswered_tickets(callback: CallbackQuery, db):
    if callback.from_user.id not in ADMIN_IDS:
        return
    tickets = await db.get_unanswered_tickets()
    if not tickets:
        await callback.message.edit_text("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.", reply_markup=get_admin_panel())
    else:
        text = "üì• –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n"
        for ticket in tickets:
            user = await db.get_user(ticket['user_id'])
            username = user['username'] if user else "Unknown"
            content = ticket['message_content'][:50] + "..." if len(str(ticket['message_content'])) > 50 else ticket['message_content']
            text += f"–ó–∞—è–≤–∫–∞ #{ticket['ticket_id']} –æ—Ç {username} (ID: {ticket['user_id']}): {content}\n"
        keyboard = get_unanswered_tickets_keyboard(tickets)
        await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "check_site")
async def check_site_status(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    try:
        result = await check_site()
        await callback.message.edit_text(result, reply_markup=get_admin_panel())
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {result}")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}", reply_markup=get_admin_panel())
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–∞: {e}")
    await callback.answer()

@router.callback_query(F.data.startswith("reply_ticket_"))
async def reply_to_ticket(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        return
    parts = callback.data.split("_")
    ticket_id = int(parts[2])
    user_id = int(parts[3])
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(ReplyTicket.message)
    await state.update_data(ticket_id=ticket_id, user_id=user_id)
    await callback.answer()

@router.message(ReplyTicket.message)
async def send_reply(message: Message, state: FSMContext, db):
    if message.from_user.id not in ADMIN_IDS:
        return
    data = await state.get_data()
    ticket_id = data['ticket_id']
    user_id = data['user_id']
    try:
        await message.bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}")
        await db.mark_ticket_answered(ticket_id)
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_admin_panel())
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{ticket_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}", reply_markup=get_admin_panel())
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É #{ticket_id}: {e}")
    await state.clear()